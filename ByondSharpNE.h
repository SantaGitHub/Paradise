//
// Auto-generated by dnne-gen
//
// .NET Assembly: ByondSharp
//

//
// Declare exported functions
//
#ifndef __DNNE_GENERATED_HEADER_BYONDSHARP__
#define __DNNE_GENERATED_HEADER_BYONDSHARP__

#include <stddef.h>
#include <stdint.h>
#include <dnne.h>

// Computed from ByondSharp._FFIExports.PollJobs__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL PollJobs(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.GetResult__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL GetResult(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.Status__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL Status(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.Fire__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL Fire(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.ReportIncompleteTimers__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL ReportIncompleteTimers(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.CreateTimer__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL CreateTimer(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.DeleteTimerByID__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL DeleteTimerByID(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.DeleteTimerByHash__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL DeleteTimerByHash(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.TimeLeft__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL TimeLeft(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.InvokeImmediately__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL InvokeImmediately(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.RepeatMe__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL RepeatMe(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.DoNothing__FFIWrapper
DNNE_API void DNNE_CALLTYPE_CDECL DoNothing(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.DoNothingButReturnString__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL DoNothingButReturnString(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.GetBYONDUserAsync__FFIWrapperDeferred
DNNE_API intptr_t DNNE_CALLTYPE_CDECL GetBYONDUserAsyncDeferred(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.GetBYONDUserAsync__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL GetBYONDUserAsync(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.AttachDebugger__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL AttachDebugger(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.StartStopwatch__FFIWrapper
DNNE_API void DNNE_CALLTYPE_CDECL StartStopwatch(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.GetStopwatchStatus__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL GetStopwatchStatus(int32_t numArgs, intptr_t argPtr);

// Computed from ByondSharp._FFIExports.TestStopwatch__FFIWrapper
DNNE_API intptr_t DNNE_CALLTYPE_CDECL TestStopwatch(int32_t numArgs, intptr_t argPtr);

#endif // __DNNE_GENERATED_HEADER_BYONDSHARP__

//
// Define exported functions
//
#ifdef DNNE_COMPILE_AS_SOURCE

#ifdef DNNE_WINDOWS
    #ifdef _WCHAR_T_DEFINED
        typedef wchar_t char_t;
    #else
        typedef unsigned short char_t;
    #endif
#else
    typedef char char_t;
#endif

//
// Forward declarations
//

extern void* get_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method,
    const char_t* dotnet_delegate_type);

extern void* get_fast_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method);

//
// String constants
//

static const char_t* t1_name = DNNE_STR("ByondSharp._FFIExports, ByondSharp");

//
// Exports
//

// Computed from ByondSharp._FFIExports.PollJobs__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* PollJobs_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL PollJobs(int32_t numArgs, intptr_t argPtr)
{
    if (PollJobs_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("PollJobs__FFIWrapper");
        PollJobs_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return PollJobs_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.GetResult__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* GetResult_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL GetResult(int32_t numArgs, intptr_t argPtr)
{
    if (GetResult_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetResult__FFIWrapper");
        GetResult_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return GetResult_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.Status__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* Status_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL Status(int32_t numArgs, intptr_t argPtr)
{
    if (Status_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("Status__FFIWrapper");
        Status_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return Status_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.Fire__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* Fire_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL Fire(int32_t numArgs, intptr_t argPtr)
{
    if (Fire_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("Fire__FFIWrapper");
        Fire_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return Fire_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.ReportIncompleteTimers__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* ReportIncompleteTimers_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL ReportIncompleteTimers(int32_t numArgs, intptr_t argPtr)
{
    if (ReportIncompleteTimers_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReportIncompleteTimers__FFIWrapper");
        ReportIncompleteTimers_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return ReportIncompleteTimers_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.CreateTimer__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* CreateTimer_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL CreateTimer(int32_t numArgs, intptr_t argPtr)
{
    if (CreateTimer_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("CreateTimer__FFIWrapper");
        CreateTimer_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return CreateTimer_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.DeleteTimerByID__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* DeleteTimerByID_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL DeleteTimerByID(int32_t numArgs, intptr_t argPtr)
{
    if (DeleteTimerByID_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DeleteTimerByID__FFIWrapper");
        DeleteTimerByID_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return DeleteTimerByID_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.DeleteTimerByHash__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* DeleteTimerByHash_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL DeleteTimerByHash(int32_t numArgs, intptr_t argPtr)
{
    if (DeleteTimerByHash_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DeleteTimerByHash__FFIWrapper");
        DeleteTimerByHash_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return DeleteTimerByHash_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.TimeLeft__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* TimeLeft_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL TimeLeft(int32_t numArgs, intptr_t argPtr)
{
    if (TimeLeft_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("TimeLeft__FFIWrapper");
        TimeLeft_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return TimeLeft_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.InvokeImmediately__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* InvokeImmediately_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL InvokeImmediately(int32_t numArgs, intptr_t argPtr)
{
    if (InvokeImmediately_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("InvokeImmediately__FFIWrapper");
        InvokeImmediately_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return InvokeImmediately_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.RepeatMe__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* RepeatMe_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL RepeatMe(int32_t numArgs, intptr_t argPtr)
{
    if (RepeatMe_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("RepeatMe__FFIWrapper");
        RepeatMe_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return RepeatMe_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.DoNothing__FFIWrapper
static void (DNNE_CALLTYPE_CDECL* DoNothing_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API void DNNE_CALLTYPE_CDECL DoNothing(int32_t numArgs, intptr_t argPtr)
{
    if (DoNothing_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DoNothing__FFIWrapper");
        DoNothing_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    DoNothing_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.DoNothingButReturnString__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* DoNothingButReturnString_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL DoNothingButReturnString(int32_t numArgs, intptr_t argPtr)
{
    if (DoNothingButReturnString_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("DoNothingButReturnString__FFIWrapper");
        DoNothingButReturnString_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return DoNothingButReturnString_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.GetBYONDUserAsync__FFIWrapperDeferred
static intptr_t (DNNE_CALLTYPE_CDECL* GetBYONDUserAsyncDeferred_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL GetBYONDUserAsyncDeferred(int32_t numArgs, intptr_t argPtr)
{
    if (GetBYONDUserAsyncDeferred_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetBYONDUserAsync__FFIWrapperDeferred");
        GetBYONDUserAsyncDeferred_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return GetBYONDUserAsyncDeferred_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.GetBYONDUserAsync__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* GetBYONDUserAsync_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL GetBYONDUserAsync(int32_t numArgs, intptr_t argPtr)
{
    if (GetBYONDUserAsync_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetBYONDUserAsync__FFIWrapper");
        GetBYONDUserAsync_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return GetBYONDUserAsync_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.AttachDebugger__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* AttachDebugger_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL AttachDebugger(int32_t numArgs, intptr_t argPtr)
{
    if (AttachDebugger_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("AttachDebugger__FFIWrapper");
        AttachDebugger_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return AttachDebugger_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.StartStopwatch__FFIWrapper
static void (DNNE_CALLTYPE_CDECL* StartStopwatch_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API void DNNE_CALLTYPE_CDECL StartStopwatch(int32_t numArgs, intptr_t argPtr)
{
    if (StartStopwatch_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("StartStopwatch__FFIWrapper");
        StartStopwatch_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    StartStopwatch_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.GetStopwatchStatus__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* GetStopwatchStatus_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL GetStopwatchStatus(int32_t numArgs, intptr_t argPtr)
{
    if (GetStopwatchStatus_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("GetStopwatchStatus__FFIWrapper");
        GetStopwatchStatus_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return GetStopwatchStatus_ptr(numArgs, argPtr);
}

// Computed from ByondSharp._FFIExports.TestStopwatch__FFIWrapper
static intptr_t (DNNE_CALLTYPE_CDECL* TestStopwatch_ptr)(int32_t numArgs, intptr_t argPtr);
DNNE_API intptr_t DNNE_CALLTYPE_CDECL TestStopwatch(int32_t numArgs, intptr_t argPtr)
{
    if (TestStopwatch_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("TestStopwatch__FFIWrapper");
        TestStopwatch_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return TestStopwatch_ptr(numArgs, argPtr);
}

#endif // DNNE_COMPILE_AS_SOURCE
